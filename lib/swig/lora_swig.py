# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_lora_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_lora_swig')
    _lora_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lora_swig', [dirname(__file__)])
        except ImportError:
            import _lora_swig
            return _lora_swig
        try:
            _mod = imp.load_module('_lora_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _lora_swig = swig_import_helper()
    del swig_import_helper
else:
    import _lora_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _lora_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _lora_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _lora_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _lora_swig.high_res_timer_epoch()
class decoder(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(samp_rate, sf):
        """
        make(float samp_rate, int sf) -> decoder_sptr

        Return a shared_ptr to a new instance of lora::decoder.

        To avoid accidental use of raw pointers, lora::decoder's constructor is in a private implementation class. lora::decoder::make is the public interface for creating new instances.

        Params: (samp_rate, sf)
        """
        return _lora_swig.decoder_make(samp_rate, sf)

    make = staticmethod(make)

    def set_sf(self, sf):
        """
        set_sf(decoder self, uint8_t sf)



        Params: (sf)
        """
        return _lora_swig.decoder_set_sf(self, sf)


    def set_samp_rate(self, samp_rate):
        """
        set_samp_rate(decoder self, float samp_rate)



        Params: (samp_rate)
        """
        return _lora_swig.decoder_set_samp_rate(self, samp_rate)


    def set_abs_threshold(self, threshold):
        """
        set_abs_threshold(decoder self, float threshold)



        Params: (threshold)
        """
        return _lora_swig.decoder_set_abs_threshold(self, threshold)

    __swig_destroy__ = _lora_swig.delete_decoder
    __del__ = lambda self: None
decoder_swigregister = _lora_swig.decoder_swigregister
decoder_swigregister(decoder)

def decoder_make(samp_rate, sf):
    """
    decoder_make(float samp_rate, int sf) -> decoder_sptr

    Return a shared_ptr to a new instance of lora::decoder.

    To avoid accidental use of raw pointers, lora::decoder's constructor is in a private implementation class. lora::decoder::make is the public interface for creating new instances.

    Params: (samp_rate, sf)
    """
    return _lora_swig.decoder_make(samp_rate, sf)

class decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora::decoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora::decoder)> self) -> decoder_sptr
        __init__(boost::shared_ptr<(gr::lora::decoder)> self, decoder p) -> decoder_sptr
        """
        this = _lora_swig.new_decoder_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(decoder_sptr self) -> decoder"""
        return _lora_swig.decoder_sptr___deref__(self)

    __swig_destroy__ = _lora_swig.delete_decoder_sptr
    __del__ = lambda self: None

    def make(self, samp_rate, sf):
        """
        make(decoder_sptr self, float samp_rate, int sf) -> decoder_sptr

        Return a shared_ptr to a new instance of lora::decoder.

        To avoid accidental use of raw pointers, lora::decoder's constructor is in a private implementation class. lora::decoder::make is the public interface for creating new instances.

        Params: (samp_rate, sf)
        """
        return _lora_swig.decoder_sptr_make(self, samp_rate, sf)


    def set_sf(self, sf):
        """
        set_sf(decoder_sptr self, uint8_t sf)



        Params: (sf)
        """
        return _lora_swig.decoder_sptr_set_sf(self, sf)


    def set_samp_rate(self, samp_rate):
        """
        set_samp_rate(decoder_sptr self, float samp_rate)



        Params: (samp_rate)
        """
        return _lora_swig.decoder_sptr_set_samp_rate(self, samp_rate)


    def set_abs_threshold(self, threshold):
        """
        set_abs_threshold(decoder_sptr self, float threshold)



        Params: (threshold)
        """
        return _lora_swig.decoder_sptr_set_abs_threshold(self, threshold)


    def history(self):
        """history(decoder_sptr self) -> unsigned int"""
        return _lora_swig.decoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decoder_sptr self, int which, int delay)
        declare_sample_delay(decoder_sptr self, unsigned int delay)
        """
        return _lora_swig.decoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(decoder_sptr self, int which) -> unsigned int"""
        return _lora_swig.decoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(decoder_sptr self) -> int"""
        return _lora_swig.decoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(decoder_sptr self) -> double"""
        return _lora_swig.decoder_sptr_relative_rate(self)


    def start(self):
        """start(decoder_sptr self) -> bool"""
        return _lora_swig.decoder_sptr_start(self)


    def stop(self):
        """stop(decoder_sptr self) -> bool"""
        return _lora_swig.decoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_swig.decoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_swig.decoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(decoder_sptr self) -> int"""
        return _lora_swig.decoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(decoder_sptr self, int m)"""
        return _lora_swig.decoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decoder_sptr self)"""
        return _lora_swig.decoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decoder_sptr self) -> bool"""
        return _lora_swig.decoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(decoder_sptr self, int m)"""
        return _lora_swig.decoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(decoder_sptr self) -> int"""
        return _lora_swig.decoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(decoder_sptr self, int i) -> long"""
        return _lora_swig.decoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(decoder_sptr self, int port, long max_output_buffer)
        """
        return _lora_swig.decoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(decoder_sptr self, int i) -> long"""
        return _lora_swig.decoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(decoder_sptr self, int port, long min_output_buffer)
        """
        return _lora_swig.decoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(decoder_sptr self) -> float"""
        return _lora_swig.decoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decoder_sptr self) -> float"""
        return _lora_swig.decoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decoder_sptr self) -> float"""
        return _lora_swig.decoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(decoder_sptr self) -> float"""
        return _lora_swig.decoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decoder_sptr self) -> float"""
        return _lora_swig.decoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(decoder_sptr self) -> float"""
        return _lora_swig.decoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decoder_sptr self, int which) -> float
        pc_input_buffers_full(decoder_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(decoder_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(decoder_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decoder_sptr self, int which) -> float
        pc_output_buffers_full(decoder_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(decoder_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(decoder_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(decoder_sptr self) -> float"""
        return _lora_swig.decoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(decoder_sptr self) -> float"""
        return _lora_swig.decoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(decoder_sptr self) -> float"""
        return _lora_swig.decoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(decoder_sptr self) -> float"""
        return _lora_swig.decoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(decoder_sptr self) -> float"""
        return _lora_swig.decoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_swig.decoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(decoder_sptr self)"""
        return _lora_swig.decoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_swig.decoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(decoder_sptr self) -> int"""
        return _lora_swig.decoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(decoder_sptr self) -> int"""
        return _lora_swig.decoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(decoder_sptr self, int priority) -> int"""
        return _lora_swig.decoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(decoder_sptr self) -> std::string"""
        return _lora_swig.decoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(decoder_sptr self) -> std::string"""
        return _lora_swig.decoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(decoder_sptr self) -> io_signature_sptr"""
        return _lora_swig.decoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(decoder_sptr self) -> io_signature_sptr"""
        return _lora_swig.decoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(decoder_sptr self) -> long"""
        return _lora_swig.decoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(decoder_sptr self) -> basic_block_sptr"""
        return _lora_swig.decoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_swig.decoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(decoder_sptr self) -> std::string"""
        return _lora_swig.decoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(decoder_sptr self, std::string name)"""
        return _lora_swig.decoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lora_swig.decoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(decoder_sptr self) -> swig_int_ptr"""
        return _lora_swig.decoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(decoder_sptr self) -> swig_int_ptr"""
        return _lora_swig.decoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lora_swig.decoder_sptr_message_subscribers(self, which_port)

decoder_sptr_swigregister = _lora_swig.decoder_sptr_swigregister
decoder_sptr_swigregister(decoder_sptr)


decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decoder = decoder.make;

class message_file_sink(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(path):
        """
        make(std::string const path) -> message_file_sink_sptr

        Return a shared_ptr to a new instance of lora::message_file_sink.

        To avoid accidental use of raw pointers, lora::message_file_sink's constructor is in a private implementation class. lora::message_file_sink::make is the public interface for creating new instances.

        Params: (path)
        """
        return _lora_swig.message_file_sink_make(path)

    make = staticmethod(make)
    __swig_destroy__ = _lora_swig.delete_message_file_sink
    __del__ = lambda self: None
message_file_sink_swigregister = _lora_swig.message_file_sink_swigregister
message_file_sink_swigregister(message_file_sink)

def message_file_sink_make(path):
    """
    message_file_sink_make(std::string const path) -> message_file_sink_sptr

    Return a shared_ptr to a new instance of lora::message_file_sink.

    To avoid accidental use of raw pointers, lora::message_file_sink's constructor is in a private implementation class. lora::message_file_sink::make is the public interface for creating new instances.

    Params: (path)
    """
    return _lora_swig.message_file_sink_make(path)

class message_file_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora::message_file_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora::message_file_sink)> self) -> message_file_sink_sptr
        __init__(boost::shared_ptr<(gr::lora::message_file_sink)> self, message_file_sink p) -> message_file_sink_sptr
        """
        this = _lora_swig.new_message_file_sink_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(message_file_sink_sptr self) -> message_file_sink"""
        return _lora_swig.message_file_sink_sptr___deref__(self)

    __swig_destroy__ = _lora_swig.delete_message_file_sink_sptr
    __del__ = lambda self: None

    def make(self, path):
        """
        make(message_file_sink_sptr self, std::string const path) -> message_file_sink_sptr

        Return a shared_ptr to a new instance of lora::message_file_sink.

        To avoid accidental use of raw pointers, lora::message_file_sink's constructor is in a private implementation class. lora::message_file_sink::make is the public interface for creating new instances.

        Params: (path)
        """
        return _lora_swig.message_file_sink_sptr_make(self, path)


    def history(self):
        """history(message_file_sink_sptr self) -> unsigned int"""
        return _lora_swig.message_file_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_file_sink_sptr self, int which, int delay)
        declare_sample_delay(message_file_sink_sptr self, unsigned int delay)
        """
        return _lora_swig.message_file_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(message_file_sink_sptr self, int which) -> unsigned int"""
        return _lora_swig.message_file_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(message_file_sink_sptr self) -> int"""
        return _lora_swig.message_file_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(message_file_sink_sptr self) -> double"""
        return _lora_swig.message_file_sink_sptr_relative_rate(self)


    def start(self):
        """start(message_file_sink_sptr self) -> bool"""
        return _lora_swig.message_file_sink_sptr_start(self)


    def stop(self):
        """stop(message_file_sink_sptr self) -> bool"""
        return _lora_swig.message_file_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(message_file_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_swig.message_file_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(message_file_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_swig.message_file_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(message_file_sink_sptr self) -> int"""
        return _lora_swig.message_file_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(message_file_sink_sptr self, int m)"""
        return _lora_swig.message_file_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_file_sink_sptr self)"""
        return _lora_swig.message_file_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_file_sink_sptr self) -> bool"""
        return _lora_swig.message_file_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(message_file_sink_sptr self, int m)"""
        return _lora_swig.message_file_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(message_file_sink_sptr self) -> int"""
        return _lora_swig.message_file_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(message_file_sink_sptr self, int i) -> long"""
        return _lora_swig.message_file_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_file_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(message_file_sink_sptr self, int port, long max_output_buffer)
        """
        return _lora_swig.message_file_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(message_file_sink_sptr self, int i) -> long"""
        return _lora_swig.message_file_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_file_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(message_file_sink_sptr self, int port, long min_output_buffer)
        """
        return _lora_swig.message_file_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(message_file_sink_sptr self) -> float"""
        return _lora_swig.message_file_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_file_sink_sptr self) -> float"""
        return _lora_swig.message_file_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_file_sink_sptr self) -> float"""
        return _lora_swig.message_file_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(message_file_sink_sptr self) -> float"""
        return _lora_swig.message_file_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_file_sink_sptr self) -> float"""
        return _lora_swig.message_file_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(message_file_sink_sptr self) -> float"""
        return _lora_swig.message_file_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_file_sink_sptr self, int which) -> float
        pc_input_buffers_full(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_file_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_file_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_file_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_file_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_file_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_file_sink_sptr self, int which) -> float
        pc_output_buffers_full(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_file_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_file_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_file_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_file_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(message_file_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_file_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(message_file_sink_sptr self) -> float"""
        return _lora_swig.message_file_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(message_file_sink_sptr self) -> float"""
        return _lora_swig.message_file_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(message_file_sink_sptr self) -> float"""
        return _lora_swig.message_file_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(message_file_sink_sptr self) -> float"""
        return _lora_swig.message_file_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(message_file_sink_sptr self) -> float"""
        return _lora_swig.message_file_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(message_file_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_swig.message_file_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(message_file_sink_sptr self)"""
        return _lora_swig.message_file_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(message_file_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_swig.message_file_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(message_file_sink_sptr self) -> int"""
        return _lora_swig.message_file_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(message_file_sink_sptr self) -> int"""
        return _lora_swig.message_file_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(message_file_sink_sptr self, int priority) -> int"""
        return _lora_swig.message_file_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(message_file_sink_sptr self) -> std::string"""
        return _lora_swig.message_file_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(message_file_sink_sptr self) -> std::string"""
        return _lora_swig.message_file_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(message_file_sink_sptr self) -> io_signature_sptr"""
        return _lora_swig.message_file_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(message_file_sink_sptr self) -> io_signature_sptr"""
        return _lora_swig.message_file_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(message_file_sink_sptr self) -> long"""
        return _lora_swig.message_file_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(message_file_sink_sptr self) -> basic_block_sptr"""
        return _lora_swig.message_file_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(message_file_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_swig.message_file_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(message_file_sink_sptr self) -> std::string"""
        return _lora_swig.message_file_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(message_file_sink_sptr self, std::string name)"""
        return _lora_swig.message_file_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(message_file_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lora_swig.message_file_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(message_file_sink_sptr self) -> swig_int_ptr"""
        return _lora_swig.message_file_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(message_file_sink_sptr self) -> swig_int_ptr"""
        return _lora_swig.message_file_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(message_file_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lora_swig.message_file_sink_sptr_message_subscribers(self, which_port)

message_file_sink_sptr_swigregister = _lora_swig.message_file_sink_sptr_swigregister
message_file_sink_sptr_swigregister(message_file_sink_sptr)


message_file_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_file_sink = message_file_sink.make;

class message_socket_sink(object):
    """Sink for messages, sent to socket."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(ip, port, loratap, loraphy):
        """
        make(std::string ip, int port, bool loratap, bool loraphy) -> message_socket_sink_sptr

        Return a shared_ptr to a new instance of lora::message_socket_sink.

        To avoid accidental use of raw pointers, lora::message_socket_sink's constructor is in a private implementation class. lora::message_socket_sink::make is the public interface for creating new instances.

        Params: (ip, port, loratap, loraphy)
        """
        return _lora_swig.message_socket_sink_make(ip, port, loratap, loraphy)

    make = staticmethod(make)
    __swig_destroy__ = _lora_swig.delete_message_socket_sink
    __del__ = lambda self: None
message_socket_sink_swigregister = _lora_swig.message_socket_sink_swigregister
message_socket_sink_swigregister(message_socket_sink)

def message_socket_sink_make(ip, port, loratap, loraphy):
    """
    message_socket_sink_make(std::string ip, int port, bool loratap, bool loraphy) -> message_socket_sink_sptr

    Return a shared_ptr to a new instance of lora::message_socket_sink.

    To avoid accidental use of raw pointers, lora::message_socket_sink's constructor is in a private implementation class. lora::message_socket_sink::make is the public interface for creating new instances.

    Params: (ip, port, loratap, loraphy)
    """
    return _lora_swig.message_socket_sink_make(ip, port, loratap, loraphy)

class message_socket_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora::message_socket_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora::message_socket_sink)> self) -> message_socket_sink_sptr
        __init__(boost::shared_ptr<(gr::lora::message_socket_sink)> self, message_socket_sink p) -> message_socket_sink_sptr
        """
        this = _lora_swig.new_message_socket_sink_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(message_socket_sink_sptr self) -> message_socket_sink"""
        return _lora_swig.message_socket_sink_sptr___deref__(self)

    __swig_destroy__ = _lora_swig.delete_message_socket_sink_sptr
    __del__ = lambda self: None

    def make(self, ip, port, loratap, loraphy):
        """
        make(message_socket_sink_sptr self, std::string ip, int port, bool loratap, bool loraphy) -> message_socket_sink_sptr

        Return a shared_ptr to a new instance of lora::message_socket_sink.

        To avoid accidental use of raw pointers, lora::message_socket_sink's constructor is in a private implementation class. lora::message_socket_sink::make is the public interface for creating new instances.

        Params: (ip, port, loratap, loraphy)
        """
        return _lora_swig.message_socket_sink_sptr_make(self, ip, port, loratap, loraphy)


    def history(self):
        """history(message_socket_sink_sptr self) -> unsigned int"""
        return _lora_swig.message_socket_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_socket_sink_sptr self, int which, int delay)
        declare_sample_delay(message_socket_sink_sptr self, unsigned int delay)
        """
        return _lora_swig.message_socket_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(message_socket_sink_sptr self, int which) -> unsigned int"""
        return _lora_swig.message_socket_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(message_socket_sink_sptr self) -> int"""
        return _lora_swig.message_socket_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(message_socket_sink_sptr self) -> double"""
        return _lora_swig.message_socket_sink_sptr_relative_rate(self)


    def start(self):
        """start(message_socket_sink_sptr self) -> bool"""
        return _lora_swig.message_socket_sink_sptr_start(self)


    def stop(self):
        """stop(message_socket_sink_sptr self) -> bool"""
        return _lora_swig.message_socket_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(message_socket_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_swig.message_socket_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(message_socket_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_swig.message_socket_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(message_socket_sink_sptr self) -> int"""
        return _lora_swig.message_socket_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(message_socket_sink_sptr self, int m)"""
        return _lora_swig.message_socket_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_socket_sink_sptr self)"""
        return _lora_swig.message_socket_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_socket_sink_sptr self) -> bool"""
        return _lora_swig.message_socket_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(message_socket_sink_sptr self, int m)"""
        return _lora_swig.message_socket_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(message_socket_sink_sptr self) -> int"""
        return _lora_swig.message_socket_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(message_socket_sink_sptr self, int i) -> long"""
        return _lora_swig.message_socket_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_socket_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(message_socket_sink_sptr self, int port, long max_output_buffer)
        """
        return _lora_swig.message_socket_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(message_socket_sink_sptr self, int i) -> long"""
        return _lora_swig.message_socket_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_socket_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(message_socket_sink_sptr self, int port, long min_output_buffer)
        """
        return _lora_swig.message_socket_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(message_socket_sink_sptr self) -> float"""
        return _lora_swig.message_socket_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_socket_sink_sptr self) -> float"""
        return _lora_swig.message_socket_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_socket_sink_sptr self) -> float"""
        return _lora_swig.message_socket_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(message_socket_sink_sptr self) -> float"""
        return _lora_swig.message_socket_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_socket_sink_sptr self) -> float"""
        return _lora_swig.message_socket_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(message_socket_sink_sptr self) -> float"""
        return _lora_swig.message_socket_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_socket_sink_sptr self, int which) -> float
        pc_input_buffers_full(message_socket_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_socket_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_socket_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_socket_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_socket_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_socket_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(message_socket_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_socket_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_socket_sink_sptr self, int which) -> float
        pc_output_buffers_full(message_socket_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_socket_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_socket_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_socket_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_socket_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_socket_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(message_socket_sink_sptr self) -> pmt_vector_float
        """
        return _lora_swig.message_socket_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(message_socket_sink_sptr self) -> float"""
        return _lora_swig.message_socket_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(message_socket_sink_sptr self) -> float"""
        return _lora_swig.message_socket_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(message_socket_sink_sptr self) -> float"""
        return _lora_swig.message_socket_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(message_socket_sink_sptr self) -> float"""
        return _lora_swig.message_socket_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(message_socket_sink_sptr self) -> float"""
        return _lora_swig.message_socket_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(message_socket_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_swig.message_socket_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(message_socket_sink_sptr self)"""
        return _lora_swig.message_socket_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(message_socket_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_swig.message_socket_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(message_socket_sink_sptr self) -> int"""
        return _lora_swig.message_socket_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(message_socket_sink_sptr self) -> int"""
        return _lora_swig.message_socket_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(message_socket_sink_sptr self, int priority) -> int"""
        return _lora_swig.message_socket_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(message_socket_sink_sptr self) -> std::string"""
        return _lora_swig.message_socket_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(message_socket_sink_sptr self) -> std::string"""
        return _lora_swig.message_socket_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(message_socket_sink_sptr self) -> io_signature_sptr"""
        return _lora_swig.message_socket_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(message_socket_sink_sptr self) -> io_signature_sptr"""
        return _lora_swig.message_socket_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(message_socket_sink_sptr self) -> long"""
        return _lora_swig.message_socket_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(message_socket_sink_sptr self) -> basic_block_sptr"""
        return _lora_swig.message_socket_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(message_socket_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_swig.message_socket_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(message_socket_sink_sptr self) -> std::string"""
        return _lora_swig.message_socket_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(message_socket_sink_sptr self, std::string name)"""
        return _lora_swig.message_socket_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(message_socket_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lora_swig.message_socket_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(message_socket_sink_sptr self) -> swig_int_ptr"""
        return _lora_swig.message_socket_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(message_socket_sink_sptr self) -> swig_int_ptr"""
        return _lora_swig.message_socket_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(message_socket_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lora_swig.message_socket_sink_sptr_message_subscribers(self, which_port)

message_socket_sink_sptr_swigregister = _lora_swig.message_socket_sink_sptr_swigregister
message_socket_sink_sptr_swigregister(message_socket_sink_sptr)


message_socket_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_socket_sink = message_socket_sink.make;

class channelizer(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(in_samp_rate, out_samp_rate, center_freq, channel_list):
        """
        make(float in_samp_rate, float out_samp_rate, float center_freq, pmt_vector_float channel_list) -> channelizer_sptr

        Return a shared_ptr to a new instance of lora::channelizer.

        To avoid accidental use of raw pointers, lora::channelizer's constructor is in a private implementation class. lora::channelizer::make is the public interface for creating new instances.

        Params: (in_samp_rate, out_samp_rate, center_freq, channel_list)
        """
        return _lora_swig.channelizer_make(in_samp_rate, out_samp_rate, center_freq, channel_list)

    make = staticmethod(make)
    __swig_destroy__ = _lora_swig.delete_channelizer
    __del__ = lambda self: None
channelizer_swigregister = _lora_swig.channelizer_swigregister
channelizer_swigregister(channelizer)

def channelizer_make(in_samp_rate, out_samp_rate, center_freq, channel_list):
    """
    channelizer_make(float in_samp_rate, float out_samp_rate, float center_freq, pmt_vector_float channel_list) -> channelizer_sptr

    Return a shared_ptr to a new instance of lora::channelizer.

    To avoid accidental use of raw pointers, lora::channelizer's constructor is in a private implementation class. lora::channelizer::make is the public interface for creating new instances.

    Params: (in_samp_rate, out_samp_rate, center_freq, channel_list)
    """
    return _lora_swig.channelizer_make(in_samp_rate, out_samp_rate, center_freq, channel_list)

class channelizer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora::channelizer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora::channelizer)> self) -> channelizer_sptr
        __init__(boost::shared_ptr<(gr::lora::channelizer)> self, channelizer p) -> channelizer_sptr
        """
        this = _lora_swig.new_channelizer_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(channelizer_sptr self) -> channelizer"""
        return _lora_swig.channelizer_sptr___deref__(self)

    __swig_destroy__ = _lora_swig.delete_channelizer_sptr
    __del__ = lambda self: None

    def make(self, in_samp_rate, out_samp_rate, center_freq, channel_list):
        """
        make(channelizer_sptr self, float in_samp_rate, float out_samp_rate, float center_freq, pmt_vector_float channel_list) -> channelizer_sptr

        Return a shared_ptr to a new instance of lora::channelizer.

        To avoid accidental use of raw pointers, lora::channelizer's constructor is in a private implementation class. lora::channelizer::make is the public interface for creating new instances.

        Params: (in_samp_rate, out_samp_rate, center_freq, channel_list)
        """
        return _lora_swig.channelizer_sptr_make(self, in_samp_rate, out_samp_rate, center_freq, channel_list)


    def primitive_connect(self, *args):
        """
        primitive_connect(channelizer_sptr self, basic_block_sptr block)
        primitive_connect(channelizer_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _lora_swig.channelizer_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(channelizer_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(channelizer_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _lora_swig.channelizer_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(channelizer_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(channelizer_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _lora_swig.channelizer_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(channelizer_sptr self, basic_block_sptr block)
        primitive_disconnect(channelizer_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _lora_swig.channelizer_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(channelizer_sptr self)"""
        return _lora_swig.channelizer_sptr_disconnect_all(self)


    def lock(self):
        """lock(channelizer_sptr self)"""
        return _lora_swig.channelizer_sptr_lock(self)


    def unlock(self):
        """unlock(channelizer_sptr self)"""
        return _lora_swig.channelizer_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(channelizer_sptr self, swig_int_ptr port_id)"""
        return _lora_swig.channelizer_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(channelizer_sptr self, swig_int_ptr port_id)"""
        return _lora_swig.channelizer_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(channelizer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_swig.channelizer_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(channelizer_sptr self)"""
        return _lora_swig.channelizer_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(channelizer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_swig.channelizer_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(channelizer_sptr self, int i) -> size_t"""
        return _lora_swig.channelizer_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(channelizer_sptr self, size_t max_output_buffer)
        set_max_output_buffer(channelizer_sptr self, int port, size_t max_output_buffer)
        """
        return _lora_swig.channelizer_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(channelizer_sptr self, int i) -> size_t"""
        return _lora_swig.channelizer_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(channelizer_sptr self, size_t min_output_buffer)
        set_min_output_buffer(channelizer_sptr self, int port, size_t min_output_buffer)
        """
        return _lora_swig.channelizer_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(channelizer_sptr self) -> hier_block2_sptr"""
        return _lora_swig.channelizer_sptr_to_hier_block2(self)


    def name(self):
        """name(channelizer_sptr self) -> std::string"""
        return _lora_swig.channelizer_sptr_name(self)


    def symbol_name(self):
        """symbol_name(channelizer_sptr self) -> std::string"""
        return _lora_swig.channelizer_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(channelizer_sptr self) -> io_signature_sptr"""
        return _lora_swig.channelizer_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(channelizer_sptr self) -> io_signature_sptr"""
        return _lora_swig.channelizer_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(channelizer_sptr self) -> long"""
        return _lora_swig.channelizer_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(channelizer_sptr self) -> basic_block_sptr"""
        return _lora_swig.channelizer_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(channelizer_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_swig.channelizer_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(channelizer_sptr self) -> std::string"""
        return _lora_swig.channelizer_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(channelizer_sptr self, std::string name)"""
        return _lora_swig.channelizer_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(channelizer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lora_swig.channelizer_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(channelizer_sptr self) -> swig_int_ptr"""
        return _lora_swig.channelizer_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(channelizer_sptr self) -> swig_int_ptr"""
        return _lora_swig.channelizer_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(channelizer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lora_swig.channelizer_sptr_message_subscribers(self, which_port)

channelizer_sptr_swigregister = _lora_swig.channelizer_sptr_swigregister
channelizer_sptr_swigregister(channelizer_sptr)


channelizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
channelizer = channelizer.make;

class controller(object):
    """Proxy of C++ gr::lora::controller class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(parent):
        """
        make(void * parent) -> controller_sptr

        Return a shared_ptr to a new instance of lora::controller.

        To avoid accidental use of raw pointers, lora::controller's constructor is in a private implementation class. lora::controller::make is the public interface for creating new instances.

        Params: (parent)
        """
        return _lora_swig.controller_make(parent)

    make = staticmethod(make)
    __swig_destroy__ = _lora_swig.delete_controller
    __del__ = lambda self: None
controller_swigregister = _lora_swig.controller_swigregister
controller_swigregister(controller)

def controller_make(parent):
    """
    controller_make(void * parent) -> controller_sptr

    Return a shared_ptr to a new instance of lora::controller.

    To avoid accidental use of raw pointers, lora::controller's constructor is in a private implementation class. lora::controller::make is the public interface for creating new instances.

    Params: (parent)
    """
    return _lora_swig.controller_make(parent)

class controller_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora::controller)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora::controller)> self) -> controller_sptr
        __init__(boost::shared_ptr<(gr::lora::controller)> self, controller p) -> controller_sptr
        """
        this = _lora_swig.new_controller_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(controller_sptr self) -> controller"""
        return _lora_swig.controller_sptr___deref__(self)

    __swig_destroy__ = _lora_swig.delete_controller_sptr
    __del__ = lambda self: None

    def make(self, parent):
        """
        make(controller_sptr self, void * parent) -> controller_sptr

        Return a shared_ptr to a new instance of lora::controller.

        To avoid accidental use of raw pointers, lora::controller's constructor is in a private implementation class. lora::controller::make is the public interface for creating new instances.

        Params: (parent)
        """
        return _lora_swig.controller_sptr_make(self, parent)


    def history(self):
        """history(controller_sptr self) -> unsigned int"""
        return _lora_swig.controller_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(controller_sptr self, int which, int delay)
        declare_sample_delay(controller_sptr self, unsigned int delay)
        """
        return _lora_swig.controller_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(controller_sptr self, int which) -> unsigned int"""
        return _lora_swig.controller_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(controller_sptr self) -> int"""
        return _lora_swig.controller_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(controller_sptr self) -> double"""
        return _lora_swig.controller_sptr_relative_rate(self)


    def start(self):
        """start(controller_sptr self) -> bool"""
        return _lora_swig.controller_sptr_start(self)


    def stop(self):
        """stop(controller_sptr self) -> bool"""
        return _lora_swig.controller_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(controller_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_swig.controller_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(controller_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_swig.controller_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(controller_sptr self) -> int"""
        return _lora_swig.controller_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(controller_sptr self, int m)"""
        return _lora_swig.controller_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(controller_sptr self)"""
        return _lora_swig.controller_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(controller_sptr self) -> bool"""
        return _lora_swig.controller_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(controller_sptr self, int m)"""
        return _lora_swig.controller_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(controller_sptr self) -> int"""
        return _lora_swig.controller_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(controller_sptr self, int i) -> long"""
        return _lora_swig.controller_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(controller_sptr self, long max_output_buffer)
        set_max_output_buffer(controller_sptr self, int port, long max_output_buffer)
        """
        return _lora_swig.controller_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(controller_sptr self, int i) -> long"""
        return _lora_swig.controller_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(controller_sptr self, long min_output_buffer)
        set_min_output_buffer(controller_sptr self, int port, long min_output_buffer)
        """
        return _lora_swig.controller_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(controller_sptr self) -> float"""
        return _lora_swig.controller_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(controller_sptr self) -> float"""
        return _lora_swig.controller_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(controller_sptr self) -> float"""
        return _lora_swig.controller_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(controller_sptr self) -> float"""
        return _lora_swig.controller_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(controller_sptr self) -> float"""
        return _lora_swig.controller_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(controller_sptr self) -> float"""
        return _lora_swig.controller_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(controller_sptr self, int which) -> float
        pc_input_buffers_full(controller_sptr self) -> pmt_vector_float
        """
        return _lora_swig.controller_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(controller_sptr self, int which) -> float
        pc_input_buffers_full_avg(controller_sptr self) -> pmt_vector_float
        """
        return _lora_swig.controller_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(controller_sptr self, int which) -> float
        pc_input_buffers_full_var(controller_sptr self) -> pmt_vector_float
        """
        return _lora_swig.controller_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(controller_sptr self, int which) -> float
        pc_output_buffers_full(controller_sptr self) -> pmt_vector_float
        """
        return _lora_swig.controller_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(controller_sptr self, int which) -> float
        pc_output_buffers_full_avg(controller_sptr self) -> pmt_vector_float
        """
        return _lora_swig.controller_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(controller_sptr self, int which) -> float
        pc_output_buffers_full_var(controller_sptr self) -> pmt_vector_float
        """
        return _lora_swig.controller_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(controller_sptr self) -> float"""
        return _lora_swig.controller_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(controller_sptr self) -> float"""
        return _lora_swig.controller_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(controller_sptr self) -> float"""
        return _lora_swig.controller_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(controller_sptr self) -> float"""
        return _lora_swig.controller_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(controller_sptr self) -> float"""
        return _lora_swig.controller_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(controller_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_swig.controller_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(controller_sptr self)"""
        return _lora_swig.controller_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(controller_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_swig.controller_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(controller_sptr self) -> int"""
        return _lora_swig.controller_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(controller_sptr self) -> int"""
        return _lora_swig.controller_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(controller_sptr self, int priority) -> int"""
        return _lora_swig.controller_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(controller_sptr self) -> std::string"""
        return _lora_swig.controller_sptr_name(self)


    def symbol_name(self):
        """symbol_name(controller_sptr self) -> std::string"""
        return _lora_swig.controller_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(controller_sptr self) -> io_signature_sptr"""
        return _lora_swig.controller_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(controller_sptr self) -> io_signature_sptr"""
        return _lora_swig.controller_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(controller_sptr self) -> long"""
        return _lora_swig.controller_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(controller_sptr self) -> basic_block_sptr"""
        return _lora_swig.controller_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(controller_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_swig.controller_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(controller_sptr self) -> std::string"""
        return _lora_swig.controller_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(controller_sptr self, std::string name)"""
        return _lora_swig.controller_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(controller_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lora_swig.controller_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(controller_sptr self) -> swig_int_ptr"""
        return _lora_swig.controller_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(controller_sptr self) -> swig_int_ptr"""
        return _lora_swig.controller_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(controller_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lora_swig.controller_sptr_message_subscribers(self, which_port)

controller_sptr_swigregister = _lora_swig.controller_sptr_swigregister
controller_sptr_swigregister(controller_sptr)


controller_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
controller = controller.make;



